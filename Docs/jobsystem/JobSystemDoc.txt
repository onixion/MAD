____________________________
DOKUMENTATION DES JOBSYSTEMS
----------------------------

_________
JOBSYSTEM

Das JobSystem ist ein geschlossenes System, dass den Zugriff auf die Jobs, Nodes, Scedules usw. regelt.
Der Zugriff auf diese Komponenten wird durch das JobSystem definiert.

Das System ist aber NICHT multithreading-fähig, d.h. das die Methoden des JobSystems nicht von vielen
Threads gleichzeitig verwendet werden dürfen, da es sonst zu internen Schwierigkeiten kommen kann.

Die Verwaltung des JobSystems kann von drei Komponenten des Programmes übernommen werden (nicht gleichzeitig!):

	* CLI (standalone: wird auf dem localen Rechner ausgeführt)
	* CLI-Server (Client kann mit dem JobSystem kommunizieren)
	* GUI

Diese Komponente können sich mit dem JobSystem verständigen und z.B. einen Job zu starten/stoppen.

__________
JOBSCEDULE

Der JobScedule ist ein Zeitplaner, der mithilfe einiger Zusatzklassen (JobTime, ...) erkennt, wann es für einen
Job zeit ist, ausgeführt zu werden. Dabei überprüft der Scedule in periodischen Abständen (=cycleTime) die
JobTime-Objekte der jeweiligen Jobs. Sobald ein JobTime-Objekt ein 'OK' für die Ausführung eines Jobs gibt,
kann der JobScedule den Job ausführen. Damit der Scedule bei der Ausführung des Jobs nicht zu viel Zeit
verliert, wird der Job in einem eigenen Thread ausgeführt.

Die Überprüfungen der JobTime-Objekte ist die Hautpaufgabe des JobScedules. Aber auch die Verarbeitung der
Notification-Rules gehört in den Aufgabenbereich des Scedules.

_______
JOBNODE

Eine JobNode ist eine Sammlung von Jobs, die an einen bestimmten Rechner im Netzwerk gerichtet sind.
Sie definiert eine Zieladresse (IP-Adresse), eine MAC-Adresse und eine Liste mit den Jobs, die für den
jeweiligen Rechner/Server gerichtet sind.

Da sich die Zieladresse ändern kann (DHCP timeout), muss diese regelmäßig überprüft werden und falls
notwendig geändert werden.

_______
JOBTIME

Die JobTime-Klasse kann drei verschiedene Typen annehmen: NULL, Relative und Absolute. 
Alle JobTime-Objekte, die mit dem Typen NULL initalisiert werden, werden von dem Scedule nicht beachtet. 
D.h. auch wenn der JobState auf 'Active' ist, wird der Job trotzdem nicht ausgeführt.

JobTime-Objekte mit dem Typen 'Relative' werden immer zyklisch ausgeführt (z.B. alle 20 Sekunden). 
JobTime-Objekte mit dem Typen Absolute, können an verschieden Tagen, Jahren, Stunden und Minuten ausgeführt
werden (z.B. jeden Tag um 19:30).

_______________
JOBNOTIFICATION

Diese Klasse beinhaltet alle JobNotificationRules. Diese Regeln werden nach der Ausführung des Jobs auf ihre Gültikeit
überprüft. Ist mindestens eine Regel gültig, dann wird eine Anfrage an das NotificationSystem gegeben. Das NotificationSystem
bekommt eine Liste mit allen gültigen Regeln und kann daraus, die nötigen Informationen herausholen.

__________________
JONOTIFICATIONRULE

Diese Klasse definiert eine Regel (=Rule). Die JobNotification-Klasse überprüft die Regeln auf ihre Gültigkeit.





____________________________________________________________________________________________________________________________
 ANDERE INFORMATIONEN
______________________________________________________________________________________________________________________________________

Damit ein Job ausgeführt wird, müssen vier Dinge zutreffen:

	1.) Der JobScedule muss aktiv sein. Ist der JobScedule inaktiv werden die JobNodes nicht einmal angesehen.
	2.) Der JobNode (an dem der Job befestigt ist) muss aktiv sein, sonst springt der JobScedule darüber und
            sieht sich nicht einaml die Jobs des Nodes an.
	3.) Der Job muss aktiv sein. Falls der JobState auf inaktiv ist, wird er vom JobScedule nicht ausgeführt.
        4.) Die JobTime (des jeweiligen Jobs) muss dem JobScedule vor der Ausführung zustimmen, sonst darf der JobScedule den Job nicht ausführen.

Wenn der JobScedule läuft, die JobNode, der Job aktiv sind UND die JobTime des jeweiligen Jobs ein 'OK' gibt, erst dann wird der Job ausgeführt.





